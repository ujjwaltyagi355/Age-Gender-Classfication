# -*- coding: utf-8 -*-
"""AGE_GENDER_Checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U7uUb_VRlCaoo7Yz2jHYXi7FNwLjFtg8
"""

import keras
import os
from keras.models import model_from_json
import tensorflow as tf 
import pandas as pd

# load json and create model
json_file = open('/content/drive/My Drive/age.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
age_model = tf.keras.models.model_from_json(loaded_model_json)
# load weights into new model
age_model.load_weights("/content/drive/My Drive/age.h5")
print("Loaded model from disk")
 
# evaluate loaded model on test data
age_model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])

# load json and create model
json_file = open('/content/drive/My Drive/gender.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
gender_model = tf.keras.models.model_from_json(loaded_model_json)
# load weights into new model
gender_model.load_weights("/content/drive/My Drive/gender.h5")
print("Loaded model from disk")
 
# evaluate loaded model on test data
gender_model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])

!git clone https://github.com/circulosmeos/gdown.pl.git

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1Z1RqRo0_JiavaZw2yzZG6WETdZQ8qX86/edit dataset.zip

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1i1L3Yqwaio7YSOCj7ftgk8ZZchPG7dmH/edit train.csv

!unzip dataset.zip

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1wOdja-ezstMEp81tX1a-EYkFebev4h7D/edit val.csv

from PIL import Image
import numpy as np
def preprocess(path):
  image = Image.open(path)
  image = image.resize((227, 227))
  return np.array(image)

dataset_train = pd.read_csv('train.csv')
dataset_test = pd.read_csv('val.csv')

def age_predict(path):
  l = []
  l.append(preprocess(path))
  l = np.asarray(l)
  prediction = age_model.predict(l)[0]
  return np.argmax(prediction)

def gender_predict(path):
  l = []
  l.append(preprocess(path))
  l = np.asarray(l)
  prediction = gender_model.predict(l)[0]
  return np.argmax(prediction)

rows, cols = (9, 4)
age_vs_gender = [[0 for i in range(cols)] for j in range(rows)]         # TM, FF, TF, FM
rows, cols = (9, 9) 
age_vs_age = [[0 for i in range(cols)] for j in range(rows)] 
for ind in dataset_test.index: 
  if(dataset_test['race'][ind] != 'Indian'):
    continue
  print(ind)
  path = dataset_test['file'][ind]
  actual_gender = dataset_test['gender'][ind]
  actual_age = dataset_test['age'][ind]
  if (actual_age == '0-2'):
    actual_age = 0
  elif (actual_age == '3-9'):
    actual_age = 1
  elif (actual_age == '10-19'):
    actual_age = 2
  elif (actual_age == '20-29'):
    actual_age = 3    
  elif (actual_age == '30-39'):
    actual_age = 4    
  elif (actual_age == '40-49'):
    actual_age = 5    
  elif (actual_age == '50-59'):
    actual_age = 6
  elif (actual_age == '60-69'):
    actual_age = 7
  elif (actual_age == 'more than 70'):
    actual_age = 8
  predicted_age = age_predict(path)
  actual_gender = (0, 1) [actual_gender == 'Male']
  predicted_gender = gender_predict(path)
  if(predicted_gender == 0 and actual_gender==0):
    age_vs_gender[actual_age][0]+=1
  elif(predicted_gender == 0 and actual_gender==1):
    age_vs_gender[actual_age][3]+=1
  elif(predicted_gender == 1 and actual_gender==1):
    age_vs_gender[actual_age][2]+=1
  elif(predicted_gender == 1 and actual_gender==0):
    age_vs_gender[actual_age][1]+=1
  age_vs_age[actual_age][predicted_age]+=1

for ind in dataset_train.index: 
  if(dataset_train['race'][ind] != 'Indian'):
    continue
  print(ind)
  path = dataset_train['file'][ind]
  actual_gender = dataset_train['gender'][ind]
  actual_age = dataset_train['age'][ind]
  if (actual_age == '0-2'):
    actual_age = 0
  elif (actual_age == '3-9'):
    actual_age = 1
  elif (actual_age == '10-19'):
    actual_age = 2
  elif (actual_age == '20-29'):
    actual_age = 3    
  elif (actual_age == '30-39'):
    actual_age = 4    
  elif (actual_age == '40-49'):
    actual_age = 5    
  elif (actual_age == '50-59'):
    actual_age = 6
  elif (actual_age == '60-69'):
    actual_age = 7
  elif (actual_age == 'more than 70'):
    actual_age = 8
  predicted_age = age_predict(path)
  actual_gender = (0, 1) [actual_gender == 'Male']
  predicted_gender = gender_predict(path)
  if(predicted_gender == 0 and actual_gender==0):
    age_vs_gender[actual_age][0]+=1
  elif(predicted_gender == 0 and actual_gender==1):
    age_vs_gender[actual_age][3]+=1
  elif(predicted_gender == 1 and actual_gender==1):
    age_vs_gender[actual_age][2]+=1
  elif(predicted_gender == 1 and actual_gender==0):
    age_vs_gender[actual_age][1]+=1
  age_vs_age[actual_age][predicted_age]+=1

print(age_vs_age)
print(age_vs_gender)